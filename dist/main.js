(()=>{"use strict";const t=async t=>{const n=await(async t=>{try{const[e,n,o]=await Promise.all([async function(){const e=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=8c37a0de3d0f3764695df622cf71fa1e&units=metric`,{mode:"cors"});return await e.json()}(),async function(){const e=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${t}&appid=8c37a0de3d0f3764695df622cf71fa1e&units=metric`,{mode:"cors"});return await e.json()}(),async function(){const e=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=0479021aa782499c879102938231804&q=${t}&days=5`,{mode:"cors"});return await e.json()}()]);return{response:e,response2:n,response3:o}}catch(t){console.log(t)}t||(t="london")})(t),o=n.response,a=n.response2,i=n.response3;console.log(i);let s={name:"",condition:"",temp_c:"",icon:""};s.name=o.name,s.condition=o.weather[0].description,s.temp_c=o.main.temp,s.icon=o.weather[0].icon,e.displayCurrentForecastData(s);let c={time:[],icon:[],temp_c:[]};for(let t=0;t<a.list.length;t++){c.temp_c.push(parseInt(a.list[t].main.temp)),c.icon.push(a.list[t].weather[0].icon);let e=a.list[t].dt_txt.split(/[/ :]/);e[1]+=":00",c.time.push(e[1])}e.display12hForecastData(c);const d=()=>{const t=new Date;let e=t.getDate(),n=t.getMonth()+1,o=t.getFullYear();return parseInt(e)<10&&(e=`0${e}`),parseInt(n)<10&&(n=`0${n}`),`${o}-${n}-${e}`};let r={time:["today"],icon:[o.weather[0].icon],temp_c:[o.main.temp]};function l(t){let e=t.split("-");return new Date(e[0],e[1]-1,e[2])}for(let t=1;t<i.forecast.forecastday.length;t++){const e=i.forecast.forecastday[t].date,n=0==(p=l(e).getDay())?"Sunday":1==p?"Monday":2==p?"Tuesday":3==p?"Wednesday":4==p?"Thursday":5==p?"Friday":"Saturday";1===t&&e==d()||(r.time.push(n),r.icon.push(a.list[t].weather[0].icon))}var p;console.log(r),console.log(o),console.log(a)},e=(document.getElementById("container").innerHTML='\n    <div id="column1">\n      <nav id="nav">\n          <form id="form">\n            <input type="search" id="search" placeholder="Search for cities"/>\n            <button type="submit" ><i class="fa fa-search"></i></button>\n          </form>\n        </nav>\n        <div id="box">\n          <div id="box-1">\n            <div id="loc-con">\n              <h1 id="location"></h1>\n              <p id="condition"></p>\n            </div>\n            <h1 id="temp-c"></h1>\n          </div>\n          <div id="box-2">\n            <img id="icon" />\n          </div>\n        </div>\n        <div id="forecast-12hr">\n          <p>12 hour forecast</p>\n          <div id="forecast-12hr-divbox">\n            <div class="forecast-12hr-div"></div>\n            <div class="forecast-12hr-div"></div>\n            <div class="forecast-12hr-div"></div>\n            <div class="forecast-12hr-div"></div>\n            <div class="forecast-12hr-div"></div>\n          </div>\n        </div>\n      </div>\n      <div id="column2">\n        <div id="forecast-5days">\n        <div class="forecast-5days-div"></div>\n        <div class="forecast-5days-div"></div>\n        <div class="forecast-5days-div"></div>\n        <div class="forecast-5days-div"></div>\n        <div class="forecast-5days-div"></div>\n        </div>\n      </div>',(()=>{const e=document.getElementById("form"),n=document.getElementById("search");e.addEventListener("submit",(e=>{t(n.value),console.log("Lol"),e.preventDefault()}))})(),{displayCurrentForecastData:t=>{const e=document.getElementById("location"),n=document.getElementById("condition"),o=document.getElementById("temp-c"),a=document.getElementById("icon");e.textContent=t.name,n.textContent=t.condition,o.textContent=parseInt(t.temp_c)+"°",a.src=`https://openweathermap.org/img/wn/${t.icon}@4x.png`},display12hForecastData:t=>{const e=document.querySelectorAll(".forecast-12hr-div");console.log("dijk");for(let n=0;n<5;n++)e[n].innerHTML=`<p>${t.time[n]}</p><img src="https://openweathermap.org/img/wn/${t.icon[n]}@2x.png"/><p>${t.temp_c[n]}°</p>`}});document.addEventListener("DOMContentLoaded",(()=>{t("London")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,